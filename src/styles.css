/* global */
:root {
  --color-interpolation: in oklch;
  --dark300:  hsl(25, 32%, 27%);
  --brand-mix: color-mix(var(--color-interpolation), var(--dark300), var(--light600) 5%);
  --dark200: color-mix(var(--color-interpolation), var(--brand-mix), black 20%);
  --dark150: color-mix(var(--color-interpolation), var(--brand-mix), black 30%);
  --dark100: color-mix(var(--color-interpolation), var(--brand-mix), black 40%);
  --light600: hsl(19, 41%, 88%);
  --active599: hsl(180, 100%, 69%);
  --active550: color-mix(var(--color-interpolation), var(--active599), transparent 50%);
  --active575: color-mix(var(--color-interpolation), var(--active599), transparent 25%);

  --dark-color: var(--dark300);
  --darker-color: var(--dark200);
  --darker-color-subdued: var(--dark150);
  --darkest-color: var(--dark100);
  --light-color: var(--light600);
  --active: var(--active599);
  --active-mid-alpha: var(--active575);
  --active-low-alpha: var(--active550);
  --gray-68: hsl(0, 0%, 27%);
  --gray-68-shadow: hsla(0, 0%, 27%, 0.5);
  --gray-42: hsl(0, 0%, 50%);
  --green: hsl(96, 100%, 69%);
  --light-red: hsl(0, 100%, 55%);
  --red: hsl(0, 100%, 37%);
  --border-radius: 2px;
  --card-border-radius: 4.75% / 3.5%;
  --card-aspect-ratio: 2.5/3.5;

  --spacing-100: 2px;
  --spacing-200: 4px;
  --spacing-300: 8px;
  --spacing-400: 16px;
  --spacing-500: 32px;

  --interaction-size-min: 24px;

  background-color: var(--dark-color);
  color: var(--light-color);
  scrollbar-color: var(--light-color) var(--dark-color);

  --data-w: #f5f5f5;
  --data-u: #30e7ff;
  --data-b: #bd7dfc;
  --data-r: #ff7b7d;
  --data-g: #32cd32;
  --data-m: goldenrod;
  --data-c: silver;
  --on-data: #1f1f1f;

  --monospace-family: Consolas, Monaco, 'Andale Mono', 'Ubuntu Mono', monospace;
  --shadow-center-blurred: 0 0 2px 2px;

  --svg-background: var(--dark-color);
  --svg-stroke: var(--active);
}

a {
  color: var(--light-color);
}
a:hover {
  color: var(--active);
}

.margin-200 {
  margin: var(--spacing-300);
}

body {
  margin: 0;
}

*:focus-visible {
  outline: 2px inset var(--active);
}

.button-like,
button {
  --text-color: var(--active-mid-alpha);
  --bkgd-color: var(--dark-color);

  background-color: var(--bkgd-color);
  color: var(--text-color);

  transition-property: color, background-color;
  transition-duration: 100ms;
  transition-timing-function: ease-out;

  cursor: pointer;
  border-width: 0;
  border-radius: var(--border-radius);
  box-sizing: border-box;
  min-width: var(--interaction-size-min);
  min-height: var(--interaction-size-min);
  text-align: center;
  font-family: system-ui, sans-serif;
  font-size: .8333333em;



  .square {
    padding: var(--spacing-100);
    aspect-ratio: 1/1;
  }
}

button:disabled {
  cursor: unset;
}
.button-like.disabled,
.button-like:disabled {
  cursor: default;
}

.button-like.disabled,
.button-like:disabled,
button:disabled {
  --text-color: var(--active-low-alpha);
  --svg-stroke: var(--active-low-alpha);
  --bkgd-color: var(--darker-color-subdued);
}

button:hover:not(:disabled),
.button-like:hover:not(:disabled) {
  --text-color: var(--dark-color);
  --svg-stroke: var(--dark-color);
  --bkgd-color: var(--active-mid-alpha);
}

input {
  color: var(--active);
  background: var(--darker-color);
  font-family: var(--monospace-family);
  border: none;
}
input:disabled {
  background-color: var(--darkest-color);
  color: var(--active-low-alpha);
}
input::placeholder {
  color: var(--active-mid-alpha);
}

select {
  background-color: var(--darker-color);
  color: var(--light-color);
  border-radius: var(--border-radius);
  min-width: var(--interaction-size-min);
  min-height: var(--interaction-size-min);
}
select:hover:not(:disabled) {
  border-color: var(--active-mid-alpha);
}

.bold {
  font-weight: bold;
}

.gone {
  opacity: 0;
}

input[type="checkbox"].custom {
  appearance: none;
  position: relative;
  width: 1.2em;
  height: 1.2em;
  border: 1px solid var(--light-color);
  /* Adjusts the position of the checkboxes on the text baseline */
  vertical-align: -2px;
  /* Set here so that Windows' High-Contrast Mode can override */
  color: var(--active);
}
input[type="checkbox"].custom:hover:not(:disabled) {
  border: 1px solid var(--active);
}
input[type="checkbox"].custom::before {
  content: "âœ”";
  position: absolute;
  font-size: 1.6em;
  top: -0.45em;
  visibility: hidden;
}
input[type="checkbox"].custom:checked::before {
  /* Use `visibility` instead of `display` to avoid recalculating layout */
  visibility: visible;
}
input[type="checkbox"].custom:indeterminate::before {
  content: "-";
  font-weight: bold;
  visibility: visible;
}

fieldset {
  margin-left: 0;
  padding-left: unset;
  padding-right: unset;
  margin-top: 4px;
  border: none;
}

h1, h2, h3, h4 {
  margin-top: 0.5em;
  margin-bottom: 0.5em;
}

p {
  margin-top: 0.5em;
  margin-bottom: 0.5em;
}

table {
  border-collapse: collapse;

  tbody {
    .w, .u, .b, .r, .g, .m, .c {
      color: var(--on-data);
    }
  }
}

table.sticky-header thead {
  position: sticky;
  top:0;
}

thead {
  background-color: var(--darkest-color);
}

th.w {
  background-color: color-mix(in oklch, var(--data-w), #000 15%);
}
th.u {
  background-color: color-mix(in oklch, var(--data-u), #000 15%);
}
th.b {
  background-color: color-mix(in oklch, var(--data-b), #000 15%);
}
th.r {
  background-color: color-mix(in oklch, var(--data-r), #000 15%);
}
th.g {
  background-color: color-mix(in oklch, var(--data-g), #000 15%);
}
th.m {
  background-color: color-mix(in oklch, var(--data-m), #000 15%);
}
th.c {
  background-color: color-mix(in oklch, var(--data-c), #000 15%);
}

tbody tr {
  background-color: var(--dark-color);
}
td.w {
  background-color: var(--data-w);
}
td.u {
  background-color: var(--data-u);
}
td.b {
  background-color: var(--data-b);
}
td.r {
  background-color: var(--data-r);
}
td.g {
  background-color: var(--data-g);
}
td.m {
  background-color: var(--data-m);
}
td.c {
  background-color: var(--data-c);
}

tbody tr:nth-child(even) {
  background-color: var(--darker-color);
}
tbody tr:nth-child(even) td.w {
  background-color: color-mix(in oklch, var(--data-w), #000 5%);
}
tbody tr:nth-child(even) td.u {
  background-color: color-mix(in oklch, var(--data-u), #000 5%);
}
tbody tr:nth-child(even) td.b {
  background-color: color-mix(in oklch, var(--data-b), #000 5%);
}
tbody tr:nth-child(even) td.r {
  background-color: color-mix(in oklch, var(--data-r), #000 5%);
}
tbody tr:nth-child(even) td.g {
  background-color: color-mix(in oklch, var(--data-g), #000 5%);
}
tbody tr:nth-child(even) td.m {
  background-color: color-mix(in oklch, var(--data-m), #000 5%);
}
tbody tr:nth-child(even) td.c {
  background-color: color-mix(in oklch, var(--data-c), #000 5%);
}

th, td {
  text-align: start;
  padding: var(--spacing-200);
}

/* classnames */

.root {
  min-height: 100svh;
}

@media (min-width: 769px) {
  .root {
    flex-direction: column;
    overflow-x: hidden;
    display: flex;
  }

  .void {
    flex: 1;
    background-color: var(--darker-color);
  }

  .void .coglib-icon {
    margin: var(--spacing-200);
  }
}

.prose {
  max-width: 769px;
}

.inverted {
  background-color: var(--active);
  color: var(--darker-color);
}

.column {
  display: flex;
  flex-direction: column;
  gap: var(--spacing-200);
}

.row {
  display: flex;
  flex-direction: row;
  gap: var(--spacing-200);
}

.column.center,
.row.center {
  align-items: center;
}

.column.space-between,
.row.space-between {
  justify-content: space-between;
}

.row.wrap {
  flex-wrap: wrap;
}

.row.wrap-reverse {
  flex-wrap: wrap-reverse;
}

.row.top {
  align-items: start;
}

.row.baseline {
  align-items: baseline;
}

.masthead {
  padding: var(--spacing-200);
  align-items: start;
}

@media print {
  .footer,
  .masthead {
    display: none;
  }
}

.masthead #page-title {
  margin-left: var(--spacing-200);
  margin-top: 0;
  margin-bottom: 0;
}

.masthead .masthead-links {
  flex-wrap: wrap;
}

.input-link input {
 appearance: none;
  outline: none;
  margin: 0;
}

.input-link,
.cube-subroutes a,
.masthead a {
  color: var(--active-mid-alpha);
  text-decoration: none;
  padding: var(--spacing-100) var(--spacing-200);
  transition-property: color, background-color;
  transition-duration: 100ms;
  transition-timing-function: ease-out;
  border-radius: var(--border-radius);
}


.input-link:hover,
.cube-subroutes a:hover,
.masthead a:hover {
  --svg-background: var(--active);
  --svg-stroke: var(--dark-color);
  color: var(--dark-color);
  background-color: var(--active-mid-alpha);
  border-color: var(--active-low-alpha) inset;
}

.input-link.active-link, .input-link:focus-visible,
.cube-subroutes .active-link, .cube-subroutes a:focus-visible,
.masthead .active-link, .masthead a:focus-visible {
  --svg-background: var(--active);
  --svg-stroke: var(--dark-color);
  color: var(--dark-color);
  background-color: var(--active);
  border-color: var(--active-mid-alpha) inset;
}

.masthead .toggle {
  position: absolute;
  top: var(--spacing-200);
  right: var(--spacing-200);
}

.search-view-root {
  display: flex;
  flex-direction: row;

  .masthead {
    flex: 1;
  }
}

.example-query {
  display: flex;
  flex-direction: row;
}

.example-query .labels {
  padding-right: 0;
}

.example-query > :last-child {
  flex: 1;
}

.example-content button {
  height: unset;
}

/* query form */

.query-form {
  margin: var(--spacing-200);
}

.execute-controls {
 flex-wrap: wrap;
}

.execute-controls .loader {
  max-width: 50%;
}

.db-info-holder {
  display:flex;
  flex-direction: column;
  flex: 1;
  padding: var(--spacing-200);
}

.source-option {
  border: var(--dark-color) inset 2px;
  padding: var(--spacing-200);
}

.source-option .radio-button-holder {
  display: grid;
  grid-template-columns: 1fr;
  grid-template-rows: 1fr;
  grid-template-areas: 'overlap';
}
.source-option .radio-button-holder input[type='radio'] {
  opacity: 0;
  grid-area: overlap;
  z-index: 2;
  width: 100%;
  height: 100%;
}
.source-option .radio-button-holder svg {
  grid-area: overlap;
  z-index: 1;
}

.source-option.selected {
  border: var(--active) inset 2px;
  background-color: var(--active);
  color: var(--dark-color);
}
.source-option:hover {
  background-color: var(--active-mid-alpha);
  border: var(--active) inset 2px;
  color: var(--dark-color);
}

.source-option .db-settings {
  margin-left: var(--spacing-200);
}

.expander {
  background-color: inherit;
}

.expander-action {
  background-color: var(--light-color);
  color: var(--dark-color);
  border-color: var(--light-color);
}

.expander-child {
  margin: var(--spacing-200);
}

.alert::before {
  content: "âš  ";
}
.alert {
  --alert-foreground: var(--light-red);
  --alert-background: whitesmoke;
  color: var(--alert-foreground);
  background-color: var(--alert-background);
  padding: var(--spacing-200) var(--spacing-300);
  font-weight: bold;
  width: fit-content;
  border-radius: var(--border-radius);
}

.alert * {
  color: inherit;
  background-color: inherit;
}

.alert button:hover:not(:disabled) {
  color: var(--alert-background);
  background-color: var(--alert-foreground);
  border-bottom-color: var(--alert-background);
  border-right-color: var(--alert-background);
}

.alert *:disabled {
  color: color-mix(in srgb, var(--alert-foreground), black 20%);
  background-color: color-mix(in srgb, var(--alert-background), black 20%);
}

.cube-import ul {
  margin-top: 0;
  margin-bottom: 0;
}
.cube-import .submit {
  margin-top: var(--spacing-200);
}

.db-import > * {
  flex: 1;
}

.db-import .scryfall-option {
  padding: var(--spacing-200);
}

.db-import .scryfall-option .size {
  margin-left: var(--spacing-200);
}

.scryfall-input {
  display: flex;
  flex-direction: row;
  align-items: center;
  cursor: pointer;

  * {
    cursor: inherit;
  }
  input[type=radio] {
    appearance: none;
  }
  label.checked {
    color: var(--active);
  }
}

.db-import .file {
  width: 100%;
  height: 100%;
  display: grid;
  grid-template-columns: 1fr;
  grid-template-rows: 1fr;
  grid-template-areas: 'overlap';
  border: var(--active-mid-alpha) 2px inset;
}
.db-import .file input {
  opacity: 0;
  width: 100%;
  height: 100%;
  z-index: 2;
  display: inline-block;
  grid-area: overlap;
  cursor: pointer;
}
.db-import .file label {
  width: 100%;
  height: 100%;
  z-index: 1;
  display: inline-block;
  grid-area: overlap;
  background: var(--active);
  color: var(--dark-color);
  text-align: center;
  align-items: center;
  justify-content: center;
}

.list-import, .file-import {
  display: flex;
  flex-direction: column;
}

.cards-to-import {
  background: var(--darker-color);
  color: #ccc;
  resize: none;
}

.cards-to-import::placeholder {
  color: var(--active-mid-alpha);
}

.results {
  background-color: var(--dark-color);
  color: var(--light-color);
  display: flex;
  flex-direction: row;
}


body:has(.query-panel) {
  /* prevents CardLink from adding site-wide scroll on first render */
  overflow-y: hidden;
}
.query-panel {
  flex:1;
  height: 100svh;
  overflow-y: auto;
}

.results .content {
  display: flex;
  flex-direction: column;
  flex: 1;
}

@media (min-width: 769px) {
  .result-container {
    padding: var(--spacing-300) var(--spacing-500) 0;
  }
}

.result-container {
  padding-top: var(--spacing-300) ;
  background-color: var(--darker-color);
  display: flex;
  flex-wrap: wrap;
  flex-direction: row;
  justify-content: center;
}

.bottom-page-control {
  align-self: end;
}

.detail-controls {
  margin-left: 20px;
}

.loader-holder {
  width: 500px;
}

.loader {
  .background {
    fill: var(--light-color);
  }
  .foreground {
    fill: var(--green);
  }
}

.saved-cards-toggle {
  margin: var(--spacing-200);
}

.saved-cards-floater {
  --show-width: 25%;
  height: 100svh;
  overflow-y: scroll;
  border-left: var(--gray-68) 2px solid;
  box-shadow: -2px 0 2px 0 var(--gray-68-shadow);

  transition-property: width;
  transition-delay: 25ms;
  transition-duration: 200ms;
  transition-timing-function: ease-in-out;
}

.saved-cards-floater.show {
  width: var(--show-width);
}

.saved-cards-floater.hide {
  width: 0;
}

.saved-cards-floater textarea {
  height: max-content;
  resize: none;
  width: auto;
  flex: 1
}

.info-key {
  font-style: oblique;
}

.disengaged {
  cursor: no-drop;
}

.engaged,
.info-key:hover {
  cursor: crosshair;
  color: var(--active);
  font-weight: bolder;
}

.themed-icon {
  .background {
    fill: var(--svg-background);
  }
  .stroke {
    fill: var(--svg-stroke);
  }

}